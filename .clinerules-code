# Otak Proxy Extension Development Rules

## Project Structure
- Main code in `src/extension.ts`
- Configuration in `package.json`
- Documentation in `README.md`

## Code Organization
1. Status Bar Management
   - Initialize status bar item early in activation
   - Show proxy status with clear icons (ðŸ”Œ for enabled, â­• for disabled)
   - Update status bar immediately after state changes

2. Proxy Configuration
   - Store proxy URL in VSCode settings (`otakProxy.proxyUrl`)
   - Maintain state in extension's global state
   - Update all systems simultaneously:
     - OS system proxy settings:
       - Windows: WinHTTP
       - macOS: Network Services
       - Linux: GNOME
     - VSCode (`http.proxy`)
     - Git (`http.proxy` and `https.proxy`)

3. Error Handling
   - Independent error handling for each component
   - Gracefully handle missing tools
   - Provide clear error messages
   - Log detailed errors to console
   - Handle OS-specific proxy configuration errors

4. User Interface
   - Initial setup wizard on first launch
   - Clear status bar indicators
   - Confirmation dialogs for important actions
   - Input validation for proxy URL
   - OS-specific permission warnings

## Implementation Rules

1. Command Execution
   - Use `execAsync` for all CLI commands
   - Handle execution errors appropriately
   - Validate tool existence before execution
   - Handle OS-specific command variations

2. State Management
   - Use VSCode's `globalState` for persistent storage
   - Keep proxy state synchronized across all tools
   - Update UI immediately after state changes
   - Track system proxy state independently

3. Configuration Updates
   - Use VSCode's configuration API for settings
   - Update global configurations only
   - Validate settings before applying
   - Handle OS-specific configuration paths

4. Error Handling
   - Catch and log all errors
   - Show user-friendly error messages
   - Maintain system stability on errors
   - Handle OS privilege errors gracefully

5. UI/UX Guidelines
   - Clear and concise messages
   - Consistent icon usage
   - Immediate visual feedback
   - Non-blocking operations
   - OS-specific setup instructions

## Cross-Platform Considerations
1. System Proxy Configuration
   - Implement OS-specific proxy configuration methods
   - Handle permission requirements appropriately
   - Validate system proxy changes
   - Provide fallback mechanisms

2. Tool Availability
   - Check for required system tools
   - Handle missing dependencies gracefully
   - Provide clear installation instructions
   - Support alternative configuration methods

3. Permission Management
   - Request elevated privileges when needed
   - Clear communication about permission requirements
   - Handle permission denial gracefully
   - Provide alternative manual setup instructions

## Testing Considerations
1. Verify proxy settings across all tools
2. Test error scenarios (missing tools, invalid URLs)
3. Check state persistence across VSCode restarts
4. Validate configuration changes
5. Test initial setup workflow
6. Cross-platform testing
   - Windows WinHTTP configuration
   - macOS Network Services
   - Linux GNOME settings

## Maintenance Guidelines
1. Keep error messages clear and actionable
2. Maintain thorough documentation
3. Follow VSCode extension best practices
4. Use TypeScript features for type safety
5. Regular testing of all functionality
6. Keep OS-specific code modular

## Development Workflow
1. Use `npm run compile` to build
2. Test with F5 in VSCode
3. Verify changes in extension host
4. Check error handling
5. Update documentation as needed
6. Test on all supported platforms